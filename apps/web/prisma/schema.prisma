// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    blogs         Blog[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Blog {
    id        String    @id @unique
    name      String?
    markdown  String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    recipes   Recipe[]
    public    Boolean   @default(true)
}

model Recipe {
    id          String             @id @default(cuid())
    markdown    String
    version     Int                @default(1)
    history     RecipeHistory[]
    metadataId  String?
    metadata    RecipeMetadata?
    ingredients RecipeIngredient[]
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt
    blog        Blog               @relation(fields: [blogId], references: [id], onDelete: Cascade)
    blogId      String
    slug        String?
    public      Boolean            @default(true)
    @@unique([blogId, slug])
    @@index([blogId, slug])
    @@index([blogId, id])

}

model RecipeMetadata {
    id          String             @id @default(cuid())
    recipeId    String             @unique
    recipe      Recipe             @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    name        String
    summary     String
    ingredients RecipeIngredient[]
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt
}

model Ingredient {
    id          String             @id @default(cuid())
    name        String             @unique
    recipes     RecipeIngredient[]
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt
}

model RecipeIngredient {
    id           String          @id @default(cuid())
    recipeId     String
    ingredientId String
    quantity     String?
    important    Boolean         @default(false)
    unit         String?
    description  String?
    recipe       Recipe          @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    ingredient   Ingredient      @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
    metadata     RecipeMetadata? @relation(fields: [metadataId], references: [id])
    metadataId   String?
    createdAt    DateTime        @default(now())
    updatedAt    DateTime        @updatedAt

    @@unique([recipeId, ingredientId])
}

model RecipeHistory {
    id        String   @id @default(cuid())
    recipeId  String
    version   Int
    markdown  String
    recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([recipeId, version])
}
